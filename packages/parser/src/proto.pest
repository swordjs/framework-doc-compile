Number = @{ (ASCII_DIGIT | "." | "-" | "_")+ }
Name = @{ ASCII_ALPHA ~ (ASCII_ALPHANUMERIC | "_")* }
String = @{ "\"" ~ (ASCII_ALPHANUMERIC | "." | " " | "\\" | "/")* ~ "\"" }
Identifier = @{ Name ~ ("." ~ Name)* }
Boolean = @{ "true" | "false" }
Undefined = @{ "undefined" }
Null = @{ "null" }
Array = { "[" ~ Expression? ~ ("," ~ Expression)* ~ ","? ~ "]" }
Object = { "{" ~ "}" }
Operand = @{ "+" | "-" | "*" | "/" | "%" | "<" | ">" | "<=" | ">=" | "&&" | "||" | "==" | "!=" | "===" | "!==" }
OpAssign = @{ "=" | "+=" | "-=" | "*=" | "/=" | "%=" }
Inc = { "++" }
Dec = { "--" }
Term = { Number | Boolean | Null | Undefined | String | Array | Identifier | "(" ~ Expression ~ ")" }
PrefixTerm = { (Inc | Dec) ~ Term }
PostTerm = { Term ~ (Inc | Dec) }
Expression = {
    Assign
    | Term ~ Operand ~ Term
    | PrefixTerm
    | PostTerm
    | Call
    | Closur 
    | Term
}

CallList = { Expression ~ ("," ~ Expression)* ~ ","? }
Call = { Identifier ~ "(" ~ CallList ~ ")" }

AssignDefinition = { Name ~ (":" ~ TypeIdentifiers)? }
Const = { "const" ~ AssignDefinition ~ "=" ~ Expression }
Let = { "let" ~ AssignDefinition ~ "=" ~ Expression }
Assign = { Identifier ~ OpAssign ~ Expression }
Return = { "return" ~ Expression }

If = { "if" ~ "(" ~ Expression ~ ")" ~ Block ~ ElseIf* ~ Else? }
ElseIf = { "else" ~ "if" ~ "(" ~ Expression ~ ")" ~ Block }
Else = { "else" ~ Block }

Break = { "break" }
CaseTerm = { Number | String }
Case = { "case" ~ CaseTerm ~ ":" ~ Statement* }
Default = { "default" ~ ":" ~ Statement* }
Switch = { "switch" ~ "(" ~ Expression ~ ")" ~ "{" ~ (Case | Default)* ~ "}" }

While = { "while" ~ "(" ~ Expression ~ ")" ~ Block }
For = { "for" ~ "(" ~ Let ~ ";" ~ Expression ~ ";" ~ Expression ~ ")" ~ Block }
ForOf = { "for" ~ "(" ~ ("const" | "let") ~ Name ~ "of" ~ Expression ~ ")" ~ Block }
ForIn = { "for" ~ "(" ~ ("const" | "let") ~ Name ~ "in" ~ Expression ~ ")" ~ Block }

TryCatch = { "try" ~ Block ~ "catch" ~ "(" ~ Name ~ ")" ~ Block }
Throw = { "throw" ~ Expression }

NameList = { Name ~ ("," ~ Name)* }
IdentifierList = { Identifier ~ ("," ~ Identifier)* }

TypeIdentifier = { "boolean" | "null" | "any" | "number" | "string" | "void" | Identifier ~ TemplateDefinition | Identifier }
TypeIdentifiers = { TypeIdentifier ~ ("|" ~ TypeIdentifier)* }

TemplateName = { Name ~ ("extends" ~ TypeIdentifiers)? }
TemplateDefinition = { "<" ~ TemplateName ~ ">" }

InterfaceExtends = { "extends" ~ IdentifierList }
InterfaceAttribute = { Param }
InterfaceMethod = { Name ~ FunctionDefinition }
InterfaceBody = { "{" ~ (InterfaceMethod | InterfaceAttribute)* ~ "}" }
Interface = { "interface" ~ Name ~ InterfaceExtends? ~ InterfaceBody }

ClassAttribute = { Param }
MethodPrefix = { "static"? ~ "async"? }
Method = { Name ~ FunctionDefinition ~ Block }
Extends = { "extends" ~ Identifier }
Implements = { "implements" ~ IdentifierList }
ClassBody = { "{" ~ (Method | ClassAttribute)* ~ "}" }
Class = { "class" ~ Name ~ TemplateDefinition? ~ Extends? ~ Implements? ~ ClassBody }

TypeTuple = { Name ~ ":" ~ TypeIdentifier }
TypeBlock = { "{" ~ TypeTuple? ~ ("," ~ TypeTuple)* ~ ","? ~ "}" }
TypeDefinition = { (Name | TypeBlock) ~ ("|" ~ (Name | TypeBlock))* }
Type = { "type" ~ Name ~ "=" ~ TypeDefinition }

Param = { Name ~ (":" ~ TypeIdentifiers)? ~ ("=" ~ Term)? }
ParamList = { Param? ~ ("," ~ Param)* }
ReturnType = { ":" ~ TypeIdentifiers }
FunctionDefinition = { "(" ~ ParamList ~ ")" ~ ReturnType? }
Function = { "function" ~ Name ~ TemplateDefinition? ~ FunctionDefinition ~ Block }

Closur = { FunctionDefinition ~ "=>" ~ Block }

Block = { "{" ~ Statement* ~ "}" }
Statement = { ( Let | Const | TryCatch | Throw | If | Switch | While | ForOf | ForIn | For | Function | Break | Return | Block | Assign  ) ~ ";"? }

Import = { "import" ~ String }
ImportName = { Name ~ ("as" ~ Name)? }
ImportNameList = { ImportName ~ ("," ~ ImportName)* }
ImportFrom = { "import" ~ "{" ~ ImportNameList ~ "}" ~ "from" ~ String }
Statements = { SOI ~ (Import | ImportFrom | Interface | Class | Type | Statement)* ~ EOI }

// export规则
// export interface ReqParams { } 或者 export type ReqParams = { }
// export interface ReqQuery { } 或者 export type ReqQuery = { }
// export interface Res {} 或者 export type Res = { } / string / number / boolean / null / undefined

// 设置导出ReqParams的规则
ExportReqParams = { "export" ~ ("interface" | "type") ~ "ReqParams" ~ Object }
// 设置导出ReqQuery的规则
ExportReqQuery = { "export" ~ ("interface" | "type") ~ "ReqQuery" ~ Object }
// 设置导出Res的规则
ExportRes = { "export" ~ ("interface" | "type") ~ "Res" ~ (Object | String | Null | Number | Undefined) }

WHITESPACE = _{ " " | "\n" | "\t" | "\r" }
COMMENT = _{ "//" ~ (!"\n" ~ ANY)* }
MULTILINE_COMMENT = _{ "/*" ~ (!"*/" ~ ANY)* ~ "*/" }

// 对proto文件设置规则
proto = _{ SOI ~ (ExportReqParams | ExportReqQuery | ExportRes)* ~ EOI }